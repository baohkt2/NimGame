/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SpinnerNumberModel;
import interfaces.GamePlayInterface;
import java.awt.Component;
import javax.swing.JButton;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;

/**
 *
 * @author ASUS
 */
public class GamePlayView extends javax.swing.JFrame {

    /**
     * Creates new form GamePlayView
     */
    private int currentRow = -1;
    private int disabledCount = 0;
    private List<List<JLabel>> rows; // Lưu các hàng và nhãn trong mỗi hàng
    private int numberOfRows;
    private int[] SticksInRow;
    private GamePlayInterface gamePlayInterface;

    public GamePlayView() {
        initComponents();
    }

    public void setGamePlayInterface(GamePlayInterface gamePlayInterface) {
        this.gamePlayInterface = gamePlayInterface;
        refresh();
        initHistoryTaken();
    }

    public GamePlayView(int numberOfRows, int[] SticksInRow) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.numberOfRows = numberOfRows;
        this.SticksInRow = SticksInRow;
        initStatePanel();
        this.panelOverGame.setVisible(false);
        this.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelOverGame = new javax.swing.JPanel();
        lb_nameWinner = new javax.swing.JLabel();
        lb_win = new javax.swing.JLabel();
        btn_playAgain = new javax.swing.JButton();
        btn_backAfterOverGame = new javax.swing.JButton();
        lb_backgroundOverGame = new javax.swing.JLabel();
        scrollGameState = new javax.swing.JScrollPane();
        panelGameState = new javax.swing.JPanel();
        panelNavigative = new javax.swing.JPanel();
        btn_backHome = new javax.swing.JButton();
        btn_giveUp = new javax.swing.JButton();
        btn_hint = new javax.swing.JButton();
        btn_undoSticksTaken = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        panelControl = new javax.swing.JPanel();
        btn_take = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        txt_notification = new javax.swing.JLabel();
        spn_quatity = new javax.swing.JSpinner();
        txt_namePlayer = new javax.swing.JLabel();
        lb_waiting = new javax.swing.JLabel();
        lb_backgroundControl = new javax.swing.JLabel();
        scrollHistoryTaken = new javax.swing.JScrollPane();
        panelHistoryTaken = new javax.swing.JPanel();
        lb_backgroundGamePlay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelOverGame.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lb_nameWinner.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lb_nameWinner.setText("Name Of Winner");
        panelOverGame.add(lb_nameWinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 80, 30));

        lb_win.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lb_win.setText("WIN");
        panelOverGame.add(lb_win, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        btn_playAgain.setText("Play Again");
        btn_playAgain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_playAgain.setFocusPainted(false);
        btn_playAgain.setBackground(Color.WHITE);
        btn_playAgain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_playAgainMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_playAgainMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_playAgainMouseExited(evt);
            }
        });
        panelOverGame.add(btn_playAgain, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 90, -1));

        btn_backAfterOverGame.setText("Back");
        btn_backAfterOverGame.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_backAfterOverGame.setFocusPainted(false);
        btn_backAfterOverGame.setBackground(Color.WHITE);
        btn_backAfterOverGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_backAfterOverGameMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_backAfterOverGameMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_backAfterOverGameMouseExited(evt);
            }
        });
        panelOverGame.add(btn_backAfterOverGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 70, -1));

        lb_backgroundOverGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BACKGROUND_PANEL.png"))); // NOI18N
        panelOverGame.add(lb_backgroundOverGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, -1));

        getContentPane().add(panelOverGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 320, 160));

        panelGameState.setBackground(new java.awt.Color(255, 255, 255));
        panelGameState.setAutoscrolls(true);
        panelGameState.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelGameState.setLayout(new java.awt.GridBagLayout());
        scrollGameState.setViewportView(panelGameState);

        getContentPane().add(scrollGameState, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 710, 330));

        panelNavigative.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_backHome.setText("Back And Save");
        btn_backHome.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_backHome.setFocusPainted(false);
        btn_backHome.setBackground(Color.WHITE);
        btn_backHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_backHomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_backHomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_backHomeMouseExited(evt);
            }
        });
        panelNavigative.add(btn_backHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btn_giveUp.setText("Give Up");
        btn_giveUp.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_giveUp.setFocusPainted(false);
        btn_giveUp.setBackground(Color.WHITE);
        btn_giveUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_giveUpMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_giveUpMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_giveUpMouseExited(evt);
            }
        });
        panelNavigative.add(btn_giveUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 70, -1));

        btn_hint.setText("Hint");
        btn_hint.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_hint.setFocusPainted(false);
        btn_hint.setBackground(Color.WHITE);
        btn_hint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_hintMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_hintMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_hintMouseExited(evt);
            }
        });
        panelNavigative.add(btn_hint, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 60, -1));

        btn_undoSticksTaken.setText("Undo");
        btn_undoSticksTaken.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_undoSticksTaken.setFocusPainted(false);
        btn_undoSticksTaken.setBackground(Color.WHITE);
        btn_undoSticksTaken.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_undoSticksTakenMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_undoSticksTakenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_undoSticksTakenMouseExited(evt);
            }
        });
        panelNavigative.add(btn_undoSticksTaken, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 70, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BACKGROUND_PANEL.png"))); // NOI18N
        panelNavigative.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, -1));

        getContentPane().add(panelNavigative, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 450, 40));

        panelControl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_take.setText("Take");
        btn_take.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_take.setFocusPainted(false);
        btn_take.setBackground(Color.WHITE);
        btn_take.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_takeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_takeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_takeMouseExited(evt);
            }
        });
        panelControl.add(btn_take, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 60, -1));

        btn_cancel.setText("Cancel");
        btn_cancel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_cancel.setFocusPainted(false);
        btn_cancel.setBackground(Color.WHITE);
        btn_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cancelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_cancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_cancelMouseExited(evt);
            }
        });
        panelControl.add(btn_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 70, -1));

        txt_notification.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        txt_notification.setForeground(java.awt.Color.red);
        txt_notification.setText("take at least 1 stick");
        txt_notification.setVisible(false);
        panelControl.add(txt_notification, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 170, 20));

        spn_quatity.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        spn_quatity.setMinimumSize(new java.awt.Dimension(100, 22));
        spn_quatity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spn_quatityStateChanged(evt);
            }
        });
        panelControl.add(spn_quatity, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 70, -1));

        txt_namePlayer.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        panelControl.add(txt_namePlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, 90, 20));

        lb_waiting.setFont(new java.awt.Font("Segoe UI Black", 2, 14)); // NOI18N
        lb_waiting.setText("Waiting...");
        lb_waiting.setVisible(false);
        panelControl.add(lb_waiting, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        lb_backgroundControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BACKGROUND_PANEL.png"))); // NOI18N
        panelControl.add(lb_backgroundControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 380, 180));

        getContentPane().add(panelControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 310, 100));

        panelHistoryTaken.setBackground(new java.awt.Color(255, 255, 255));
        panelHistoryTaken.setLayout(new java.awt.GridBagLayout());
        scrollHistoryTaken.setViewportView(panelHistoryTaken);

        getContentPane().add(scrollHistoryTaken, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 240, 100));

        lb_backgroundGamePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/BACKGROUND_GAMEPLAY.png"))); // NOI18N
        getContentPane().add(lb_backgroundGamePlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_takeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_takeMouseClicked
        // TODO add your handling code here:        
        doTurn();
    }//GEN-LAST:event_btn_takeMouseClicked

    private void btn_cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cancelMouseClicked
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_btn_cancelMouseClicked

    private void btn_backHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMouseClicked
        // TODO add your handling code here:
        gamePlayInterface.backHome();
    }//GEN-LAST:event_btn_backHomeMouseClicked

    private void btn_undoSticksTakenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_undoSticksTakenMouseClicked
        // TODO add your handling code here:      
        undoHistoryTaken();
        refresh();
    }//GEN-LAST:event_btn_undoSticksTakenMouseClicked

    private void btn_giveUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_giveUpMouseClicked
        // TODO add your handling code here:
        gamePlayInterface.giveUp();
    }//GEN-LAST:event_btn_giveUpMouseClicked

    private void btn_hintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_hintMouseClicked
        // TODO add your handling code here:
        gamePlayInterface.hint();
    }//GEN-LAST:event_btn_hintMouseClicked

    private void btn_backAfterOverGameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backAfterOverGameMouseClicked
        // TODO add your handling code here:
        gamePlayInterface.backHomeAfterOverGame();
    }//GEN-LAST:event_btn_backAfterOverGameMouseClicked

    private void btn_playAgainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_playAgainMouseClicked
        // TODO add your handling code here:  
        panelControl.setVisible(true);
        scrollGameState.setVisible(true);
        panelNavigative.setVisible(true);
        panelOverGame.setVisible(false);
        gamePlayInterface.playAgain();
        initHistoryTaken();
        refresh();
    }//GEN-LAST:event_btn_playAgainMouseClicked

    private void spn_quatityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spn_quatityStateChanged
        // TODO add your handling code here:
        int targetDisabled = (int) spn_quatity.getValue();
        List<JLabel> rowLabels = rows.get(currentRow);
        int currentDisabledCount = disabledCount;
        changeLabelStatus(rowLabels, targetDisabled, currentDisabledCount);
    }//GEN-LAST:event_spn_quatityStateChanged

    private void btn_backHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_backHome);
    }//GEN-LAST:event_btn_backHomeMouseEntered

    private void btn_backHomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_backHome);
    }//GEN-LAST:event_btn_backHomeMouseExited

    private void btn_giveUpMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_giveUpMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_giveUp);
    }//GEN-LAST:event_btn_giveUpMouseEntered

    private void btn_giveUpMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_giveUpMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_giveUp);
    }//GEN-LAST:event_btn_giveUpMouseExited

    private void btn_hintMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_hintMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_hint);
    }//GEN-LAST:event_btn_hintMouseEntered

    private void btn_hintMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_hintMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_hint);

    }//GEN-LAST:event_btn_hintMouseExited

    private void btn_undoSticksTakenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_undoSticksTakenMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_undoSticksTaken);
    }//GEN-LAST:event_btn_undoSticksTakenMouseEntered

    private void btn_undoSticksTakenMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_undoSticksTakenMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_undoSticksTaken);
    }//GEN-LAST:event_btn_undoSticksTakenMouseExited

    private void btn_takeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_takeMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_take);
    }//GEN-LAST:event_btn_takeMouseEntered

    private void btn_takeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_takeMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_take);
    }//GEN-LAST:event_btn_takeMouseExited

    private void btn_cancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cancelMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_cancel);
    }//GEN-LAST:event_btn_cancelMouseEntered

    private void btn_cancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cancelMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_cancel);
    }//GEN-LAST:event_btn_cancelMouseExited

    private void btn_backAfterOverGameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backAfterOverGameMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_backAfterOverGame);
    }//GEN-LAST:event_btn_backAfterOverGameMouseEntered

    private void btn_backAfterOverGameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backAfterOverGameMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_backAfterOverGame);
    }//GEN-LAST:event_btn_backAfterOverGameMouseExited

    private void btn_playAgainMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_playAgainMouseEntered
        // TODO add your handling code here:
        btnMouseEntered(btn_playAgain);
    }//GEN-LAST:event_btn_playAgainMouseEntered

    private void btn_playAgainMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_playAgainMouseExited
        // TODO add your handling code here:
        btnMouseExited(btn_playAgain);
    }//GEN-LAST:event_btn_playAgainMouseExited

    /**
     * @param args the command line arguments
     */
    private void initStatePanel() {
        // Thiết lập layout cho panelGameState
        panelGameState.setLayout(new BoxLayout(panelGameState, BoxLayout.Y_AXIS));
        panelGameState.setBackground(Color.WHITE);

        rows = new ArrayList<>(); // Khởi tạo danh sách chứa các hàng

        panelGameState.removeAll(); // Xóa tất cả các thành phần hiện có
        for (int i = 0; i < numberOfRows; i++) {
            JPanel rowPanel = new JPanel();
            rowPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
            List<JLabel> rowLabels = new ArrayList<>();

            // Tạo nhãn cho mỗi que trong hàng
            for (int j = 0; j < SticksInRow[i]; j++) {
                ImageIcon icon = new ImageIcon(getClass().getResource("/images/STICK.png"));
                JLabel label = new JLabel();
                label.setIcon(icon);
                label.setBorder(BorderFactory.createEmptyBorder()); // Viền mặc định
                label.addMouseListener(new LabelClickListener(i, label)); // Thêm sự kiện click
                rowPanel.add(label);
                rowLabels.add(label);
            }
            panelGameState.add(rowPanel); // Thêm hàng vào panelGameState
            rows.add(rowLabels); // Lưu danh sách nhãn của hàng
        }
    }

    public void doHint(int currentRow, int disabledCount) {
        refresh(); // Làm mới giao diện
        this.currentRow = currentRow; // Lưu hàng hiện tại
        this.disabledCount = disabledCount; // Lưu số lượng que đã bị vô hiệu hóa
        disableOtherRows(currentRow); // Vô hiệu hóa các hàng khác

        if (spn_quatity.isEnabled()) {
            List<JLabel> rowLabels = rows.get(currentRow);
            for (JLabel label : rowLabels) {
                if (label.isEnabled()) {
                    label.setEnabled(false); // Vô hiệu hóa nhãn
                    label.setBorder(BorderFactory.createLineBorder(Color.RED)); // Đổi viền thành đỏ
                }
            }
            this.updateSPN_Quatity(); // Cập nhật giá trị cho spinner
        }
    }

// Listener xử lý sự kiện click cho nhãn
    private class LabelClickListener extends MouseAdapter {

        private int rowIndex; // Chỉ số hàng
        private JLabel label; // Nhãn

        public LabelClickListener(int rowIndex, JLabel label) {
            this.rowIndex = rowIndex;
            this.label = label;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            if (label.isEnabled()) {
                // Nếu nhãn đang enabled, chuyển nó sang disabled
                label.setEnabled(false);
                label.setBorder(BorderFactory.createLineBorder(Color.RED)); // Đổi viền thành đỏ
                disableOtherRows(rowIndex); // Vô hiệu hóa các hàng khác

                // Cập nhật số lượng `disabled` của hàng và spinner
                disabledCount++;
                updateSPN_Quatity();
            } else {
                // Nếu nhãn đang disabled, khôi phục lại nó
                disabledCount--;
                label.setEnabled(true);
                label.setBorder(BorderFactory.createEmptyBorder()); // Khôi phục viền
                checkAndEnableAllRows(); // Kiểm tra và khôi phục trạng thái enabled nếu cần
            }
        }
    }

// Vô hiệu hóa tất cả các hàng khác, trừ hàng được click
    private void disableOtherRows(int rowIndex) {
        this.currentRow = rowIndex; // Lưu hàng hiện tại
        for (int i = 0; i < rows.size(); i++) {
            if (i != rowIndex) {
                for (JLabel label : rows.get(i)) {
                    label.setEnabled(false); // Vô hiệu hóa nhãn
                }
            }
        }
    }

// Kiểm tra nếu tất cả nhãn trong hàng đều enabled thì kích hoạt lại tất cả các hàng
    private void checkAndEnableAllRows() {
        if (disabledCount == 0) {
            refresh(); // Làm mới giao diện nếu không có que nào bị vô hiệu hóa
        }
    }

    public void refresh() {
        int rowIndex = 0;
        String namePlayer = gamePlayInterface.getNamePlayerCanTake(); // Lấy tên người chơi hiện tại

        txt_namePlayer.setText(namePlayer); // Cập nhật tên người chơi
        for (List<JLabel> row : rows) {
            int numberOfSticksTakenInRow = gamePlayInterface.getNumberOfSticksTakenInRow(rowIndex++);
            for (JLabel label : row) {
                label.setEnabled(numberOfSticksTakenInRow-- <= 0); // Kích hoạt hoặc vô hiệu hóa label.setBorder(BorderFactory.createEmptyBorder()); // Khôi phục viền
                label.setBorder(BorderFactory.createEmptyBorder()); // Xóa viền đỏ nếu có
            }
        }

        disabledCount = 0; // Đặt lại số lượng que đã bị vô hiệu hóa
        this.currentRow = -1; // Đặt lại hàng hiện tại
    }

    public void setViewForAI(Boolean isEnable) {
        lb_waiting.setVisible(isEnable); // Hiển thị hoặc ẩn thông báo chờ
        spn_quatity.setEnabled(!isEnable); // Kích hoạt hoặc vô hiệu hóa spinner
        btn_cancel.setEnabled(!isEnable); // Kích hoạt hoặc vô hiệu hóa nút hủy
    }

    private void initHistoryTaken() {
        // Thiết lập layout cho panelHistoryTaken
        panelHistoryTaken.setLayout(new BoxLayout(panelHistoryTaken, BoxLayout.Y_AXIS));
        panelHistoryTaken.setBackground(Color.WHITE);

        String[] listHistory = gamePlayInterface.getHistoryTaken(); // Lấy lịch sử đã thực hiện

        panelHistoryTaken.removeAll(); // Xóa tất cả các thành phần hiện có
        // Tạo nhãn cho mỗi mục trong lịch sử
        for (String history : listHistory) {
            JLabel historyLabel = new JLabel(history); // Tạo một JLabel cho mục
            panelHistoryTaken.add(historyLabel); // Thêm JLabel vào panel
        }

        // Làm mới panel để hiển thị lịch sử ban đầu
        panelHistoryTaken.revalidate(); // Xác thực lại layout
        panelHistoryTaken.repaint(); // Vẽ lại panel để phản ánh thay đổi
    }

    public void updateHistoryTaken() {
        // Lấy lịch sử mới nhất từ logic trò chơi
        String[] listHistory = gamePlayInterface.getHistoryTaken();

        // Kiểm tra nếu mảng lịch sử không rỗng
        if (listHistory.length > 0) {
            // Lấy mục lịch sử cuối cùng
            String history = listHistory[listHistory.length - 1];
            JLabel historyLabel = new JLabel(history); // Tạo một JLabel cho mục mới
            panelHistoryTaken.add(historyLabel); // Thêm JLabel vào panel

            // Làm mới panel để hiển thị lịch sử đã cập nhật
            panelHistoryTaken.revalidate(); // Xác thực lại layout
            panelHistoryTaken.repaint(); // Vẽ lại panel để phản ánh thay đổi

            // Tự động cuộn đến mục cuối cùng sau khi cập nhật panel
            SwingUtilities.invokeLater(() -> {
                JScrollBar verticalScrollBar = ((JScrollPane) panelHistoryTaken.getParent().getParent()).getVerticalScrollBar();
                verticalScrollBar.setValue(verticalScrollBar.getMaximum()); // Cuộn xuống dưới cùng
            });
        } else {
            // Xử lý trường hợp không có lịch sử
            System.out.println("Không có lịch sử để cập nhật."); // Thông báo gỡ lỗi
        }
    }

    private void undoHistoryTaken() {
        gamePlayInterface.undoSticksTaken(); // Hoàn tác hành động đã thực hiện

        // Xóa nhãn cuối cùng khỏi panel
        Component[] components = panelHistoryTaken.getComponents();
        if (components.length > 0) {
            panelHistoryTaken.remove(components[components.length - 1]); // Xóa thành phần cuối cùng
        }

        // Làm mới panel để hiển thị lịch sử đã cập nhật
        panelHistoryTaken.revalidate(); // Xác thực lại layout
        panelHistoryTaken.repaint(); // Vẽ lại panel để phản ánh thay đổi
    }

    public void doTurn() {
        if (spn_quatity.isEnabled() && currentRow != -1) {
            int targetDisabled = (int) spn_quatity.getValue(); // Lấy số lượng que mục tiêu
            List<JLabel> rowLabels = rows.get(currentRow); // Lấy nhãn hàng hiện tại
            int currentDisabledCount = disabledCount; // Lấy số lượng que đã bị vô hiệu hóa hiện tại

            changeLabelStatus(rowLabels, targetDisabled, currentDisabledCount); // Thay đổi trạng thái nhãn

            // Gọi takeSticks dựa trên trạng thái mới
            if (currentDisabledCount < targetDisabled || currentDisabledCount > targetDisabled) {
                takeSticks(targetDisabled); // Lấy que theo số lượng mục tiêu
            } else {
                takeSticks(currentDisabledCount); // Lấy que theo số lượng hiện tại
            }
        } else {
            takeSticks(disabledCount); // Lấy que theo số lượng đã bị vô hiệu hóa
        }
    }

    private void changeLabelStatus(List<JLabel> rowLabels, int targetDisabled, int currentDisabledCount) {
        if (currentDisabledCount < targetDisabled) {
            // Cần vô hiệu hóa thêm nhãn
            int toDisable = targetDisabled - currentDisabledCount;
            for (JLabel label : rowLabels) {
                if (label.isEnabled() && toDisable > 0) {
                    label.setEnabled(false); // Vô hiệu hóa nhãn
                    label.setBorder(BorderFactory.createLineBorder(Color.RED)); // Đổi viền thành đỏ
                    toDisable--;
                }
                if (toDisable == 0) {
                    return; // Thoát sau khi đạt mục tiêu
                }
            }
            if (toDisable > 0) {
                txt_notification.setText("Số lượng que đã đạt tối đa"); // Thông báo nếu đã đạt tối đa
            }
        } else if (currentDisabledCount > targetDisabled) {
            // Cần kích hoạt lại một số nhãn
            int toEnable = currentDisabledCount - targetDisabled;
            for (JLabel label : rowLabels) {
                if (!label.isEnabled() && toEnable > 0) {
                    label.setEnabled(true); // Kích hoạt nhãn
                    label.setBorder(BorderFactory.createEmptyBorder()); // Khôi phục viền
                    toEnable--;
                }
                if (toEnable == 0) {
                    return; // Thoát sau khi đạt mục tiêu
                }
            }
        }
    }

    public void takeSticks(int count) {
        gamePlayInterface.takeSticks(currentRow, count); // Gọi phương thức lấy que từ giao diện trò chơi
    }

    public void updateSPN_Quatity() {
        if (spn_quatity.isEnabled()) {
            int numberOfSticksTakenInRow = gamePlayInterface.getNumberOfSticksTakenInRow(currentRow); // Lấy số que đã lấy trong hàng hiện tại
            spn_quatity.setModel(new SpinnerNumberModel(disabledCount, 0, SticksInRow[currentRow] - numberOfSticksTakenInRow, 1)); // Cập nhật mô hình cho spinner
        }
    }

    public void OverGame(String nameWinner) {
        lb_nameWinner.setText(nameWinner); // Hiển thị tên người chiến thắng
        panelControl.setVisible(false); // Ẩn panel điều khiển
        scrollGameState.setVisible(false); // Ẩn trạng thái trò chơi
        panelNavigative.setVisible(false); // Ẩn panel điều hướng
        panelOverGame.setVisible(true); // Hiển thị panel kết thúc trò chơi
    }

    private void btnMouseEntered(JButton btn) {
        btn.setBackground(Color.ORANGE); // Đổi màu nền nút khi chuột di chuyển vào
    }

    private void btnMouseExited(JButton btn) {
        btn.setBackground(Color.WHITE); // Khôi phục màu nền nút khi chuột di chuyển ra
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePlayView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePlayView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePlayView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePlayView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePlayView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backAfterOverGame;
    private javax.swing.JButton btn_backHome;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_giveUp;
    private javax.swing.JButton btn_hint;
    private javax.swing.JButton btn_playAgain;
    private javax.swing.JButton btn_take;
    private javax.swing.JButton btn_undoSticksTaken;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lb_backgroundControl;
    private javax.swing.JLabel lb_backgroundGamePlay;
    private javax.swing.JLabel lb_backgroundOverGame;
    private javax.swing.JLabel lb_nameWinner;
    private javax.swing.JLabel lb_waiting;
    private javax.swing.JLabel lb_win;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPanel panelGameState;
    private javax.swing.JPanel panelHistoryTaken;
    private javax.swing.JPanel panelNavigative;
    private javax.swing.JPanel panelOverGame;
    private javax.swing.JScrollPane scrollGameState;
    private javax.swing.JScrollPane scrollHistoryTaken;
    private javax.swing.JSpinner spn_quatity;
    private javax.swing.JLabel txt_namePlayer;
    private javax.swing.JLabel txt_notification;
    // End of variables declaration//GEN-END:variables
}
